        // 
        //  Copyright (c) 2008 Scott C. Klement  All rights reserved.
        //  Modernised September 2025 Nick Litten

        //  Redistribution and use in source and binary forms, with or without
        //  modification, are permitted provided that the following conditions
        //  are met:
        //  1. Redistributions of source code must retain the above copyright
        //     notice, this list of conditions and the following disclaimer.
        //  2. Redistributions in binary form must reproduce the above copyright
        //     notice, this list of conditions and the following disclaimer in the
        //     documentation and/or other materials provided with the distribution.

        //  THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
        //  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        //  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPO
        //  ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
        //  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTI
        //  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
        //  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
        //  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRI
        //  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WA
        //  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
        //  SUCH DAMAGE.

        /if defined(STDIO_H)
        /eof
        /endif
        /define STDIO_H

          // -----------------------------------------------------------------
          //  Data types
          // -----------------------------------------------------------------
         dcl-s pFILE pointer  based(prototype_only);

         dcl-s stdin   like(pFILE) import('_C_IFS_stdin');
         dcl-s stdout   like(pFILE) import('_C_IFS_stdout');
         dcl-s stderr   like(pFILE) import('_C_IFS_stderr');

          // -----------------------------------------------------------------
          //  fopen():  Open File for buffered reading/writing

          //    filename = (input) path to file in the IFS
          //        mode = (input) various open mode flags.  (see manual)

          //   returns *NULL upon error, or a pointer to a FILE structure
          // -----------------------------------------------------------------
         dcl-pr fopen  ExtProc('_C_IFS_fopen') like(pFILE);
          filename pointer value options(*string);
          mode pointer value options(*string);
         end-pr fopen;


          // -----------------------------------------------------------------
          //  fgets(): read a string
          //     string = (output) string read (null-terminated)
          //       size = (input) maximum size that can be stored in string
          //     stream = (input) FILE structure to read data from
          //  returns a pointer to the string read from the file
          //       or *NULL upon EOF or error.
          // -----------------------------------------------------------------
         dcl-pr fgets pointer ExtProc('_C_IFS_fgets');
          string pointer value;
          size int(10) value;
          stream  like(pFILE) value;
         end-pr fgets;

          // -----------------------------------------------------------------
          //  fputs(): Write string
          //     string = (input) string to write to file
          //     stream = (input) FILE structure designating the file to
          //                 write to.
          //   returns a non-negative value if successful
          //        or -1 upon error
          // -----------------------------------------------------------------
         dcl-pr fputs int(10) ExtProc('_C_IFS_fputs');
          string pointer value options(*string);
          stream  like(pFILE) value;
         end-pr fputs;

          // -----------------------------------------------------------------
          //  fread(): Read items
          //     data = (input) data items to read
          //     size = (input) size of each data item
          //    count = (input) number of data items
          //   stream = (input) pointer to FILE structure to read from
          //  returns the number of full items read, a short count
          //          indicates an error.
          // -----------------------------------------------------------------
         dcl-pr fread uns(10) ExtProc('_C_IFS_fread');
          data pointer value;
          size uns(10) value;
          count uns(10) value;
          stream  like(pFILE) value;
         end-pr fread;

          // -----------------------------------------------------------------
          //  fwrite(): Write items
          //     data = (input) data items to write
          //     size = (input) size of each data item
          //    count = (input) number of data items
          //   stream = (input) pointer to FILE structure to write to
          //  returns the number of full items written.  A short count
          //          indicates an error.
          // -----------------------------------------------------------------
         dcl-pr fwrite uns(10) ExtProc('_C_IFS_fwrite');
          data pointer value;
          size uns(10) value;
          count uns(10) value;
          stream  like(pFILE) value;
         end-pr fwrite;

          // -----------------------------------------------------------------
          //  fflush():  Flush a stream
          //     stream = (input) pointer to FILE structure to flush
          //  returns 0 if successful, -1 otherwise
          // -----------------------------------------------------------------
         dcl-pr fflush uns(10) ExtProc('_C_IFS_fflush');
          stream  like(pFILE) value;
         end-pr fflush;

          // -----------------------------------------------------------------
          //  fclose(): Close File
          //     stream = (input) pointer to FILE structure to close
          // -----------------------------------------------------------------
         dcl-pr fclose int(10) ExtProc('_C_IFS_fclose');
          stream  like(pFILE) value;
         end-pr fclose;

          // -----------------------------------------------------------------
          //  fseek(): Reposition a file
          //     stream = (input) pointer to FILE structure to reposition
          //     offset = (input) offset from "whence" in bytes
          //     whence = (input) position to begin offset at, can be
          //                 SEEK_SET, SEEK_END or SEEK_CUR
          //  returns 0 if successful, -1 otherwise
          // -----------------------------------------------------------------
         dcl-pr fseek int(10) ExtProc('_C_IFS_fseek');
          stream  like(pFILE) value;
          offset int(10) value;
          whence int(10) value;
         end-pr fseek;

        /if not defined(SEEK_WHENCE_VALUES)
         dcl-c SEEK_SET CONST(0);
         dcl-c SEEK_CUR CONST(1);
         dcl-c SEEK_END CONST(2);
        /define SEEK_WHENCE_VALUES
        /endif

          // -----------------------------------------------------------------
          //  ftell(): Get Current position
          //     stream = (input) pointer to FILE structure
          //  returns the file position, or -1 upon error
          // -----------------------------------------------------------------
         dcl-pr ftell int(10) ExtProc('_C_IFS_ftell');
          stream  like(pFILE) value;
         end-pr ftell;

          // -----------------------------------------------------------------
          //  fdopen():  Upgrade a file descriptor to a buffered stream
          //       fildes = (input) file descriptor to upgrade
          //         mode = (input) mode, equivalent to the mode specified
          //                    on the fopen() API, except that it must be
          //                    compatible with the flags that were used on
          //                    the open() API.
          //   Returns a new pointer to a buffered stream I/O file
          //        or *NULL upon error.
          // -----------------------------------------------------------------
         dcl-pr fdopen pointer extproc('fdopen');
          fildes int(10) value;
          mode pointer value options(*string);
         end-pr fdopen;
